#pragma kernel ProjectSingleCell

#define Buf RWStructuredBuffer

Buf<float> _horizVel;
Buf<float> _vertVel;

Buf<int> _isFluid;

Buf<float3> _debug;

int _simResX;
int _simResY;

int _updateX;
int _updateY;

#include "positions.cginc"

[numthreads(1,1,1)]
void ProjectSingleCell(uint3 id: SV_DispatchThreadID) {
    int2 pos = int2(_updateX, _updateY);

    if(pos.x >= _simResX || pos.y >= _simResY) {
        return;
    }

    int2 simRes = int2(_simResX, _simResY);
    int offset = pos.x * _simResY + pos.y;

    float d = 0;
    float u_right = 0;
    float u_here = 0;
    float v_up = 0;
    float v_here = 0;
    if(pos.x > 0 && pos.y > 0 && pos.x < _simResX - 1 && pos.y < _simResY - 1) {
        if(_isFluid[offset] == 1) {
            int s_sum =
                _isFluid[L(offset)] +
                _isFluid[R(offset)] +
                _isFluid[U(offset)] +
                _isFluid[D(offset)];
            if(s_sum != 0) {
                d =
                    - _horizVel[offset] + _horizVel[R(offset)]
                    - _vertVel[offset] + _vertVel[U(offset)];
                float d_pre = d / s_sum;
                u_here = _isFluid[L(offset)] == 1 ? d_pre : 0;
                u_right = _isFluid[R(offset)] == 1 ? - d_pre : 0;
                v_here = _isFluid[D(offset)] == 1 ? d_pre : 0;
                v_up = _isFluid[U(offset)] == 1 ? - d_pre : 0;
            }
        }
    }
    if(pos.x < _simResX - 1) _horizVel[R(offset)] += u_right;
    if(pos.y < _simResY - 1) _vertVel[U(offset)] += v_up;
    _horizVel[offset] = _horizVel[offset] + u_here;
    _vertVel[offset] = _vertVel[offset] + v_here;
}
