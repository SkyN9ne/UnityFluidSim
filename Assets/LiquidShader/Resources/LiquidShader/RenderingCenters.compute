#pragma kernel RenderFloat3s
#pragma kernel RenderFloat4s
#pragma kernel RenderFloats
#pragma kernel RenderInts
#pragma kernel RenderBools
#pragma kernel CheckDesign

#define Buf RWStructuredBuffer

Buf<float> _horizVel;
Buf<float> _vertVel;
Buf<int> _isFluid;
Buf<float3> _float3sToRender;
Buf<float4> _float4sToRender;
Buf<float3> _velocitySources;

int _uOffset;

RWTexture2D<float4> _renderTexture;

int2 _simRes;
int2 _renderRes;

#define _simResX (_simRes.x)
#define _simResY (_simRes.y)
#define renderResX (_renderRes.x)
#define renderResY (_renderRes.y)

#include "positions.cginc"

[numthreads(8,8,1)]
void RenderFloat3s(uint3 id : SV_DispatchThreadID)
{
    int2 renderXY = id.xy;
    int2 simXY = int2(id.x * _simResX / renderResX, id.y * _simResY / renderResY);
    int simOffset = simXY.x * _simResY + simXY.y;
    float3 col = _float3sToRender[simOffset];
    _renderTexture[renderXY] = float4(col, 1);
}


[numthreads(8,8,1)]
void RenderFloat4s(uint3 id : SV_DispatchThreadID)
{
    int2 renderXY = id.xy;
    int2 simXY = int2(id.x * _simResX / renderResX, id.y * _simResY / renderResY);
    int simOffset = simXY.x * _simResY + simXY.y;
    float4 col = _float4sToRender[simOffset];
    _renderTexture[renderXY] = col;
}

[numthreads(8,8,1)]
void RenderInts(uint3 id : SV_DispatchThreadID)
{
    /*
    use u as source
    */
    int2 renderXY = id.xy;
    int2 simXY = int2(id.x * _simResX / renderResX, id.y * _simResY / renderResY);
    int simOffset = simXY.x * _simResY + simXY.y;
    int value = _isFluid[simOffset];
    _renderTexture[renderXY] = float4(value.xxx, 1);
}

[numthreads(8,8,1)]
void RenderBools(uint3 id : SV_DispatchThreadID)
{
    /*
    use u as source
    */
    int2 renderXY = id.xy;
    int2 simXY = int2(id.x * _simResX / renderResX, id.y * _simResY / renderResY);
    int simOffset = simXY.x * _simResY + simXY.y;
    int value = _isFluid[simOffset];
    if(value == 1) {
        _renderTexture[renderXY] = float4(0.8, 0.8, 0.8, 1);
    } else if( value == 0) {
        _renderTexture[renderXY] = float4(0, 0, 0, 1);
    } else {
        _renderTexture[renderXY] = float4(1, 0, 0, 1);
    }
}

[numthreads(8,8,1)]
void RenderFloats(uint3 id : SV_DispatchThreadID)
{
    /*
    use u as source
    */
    int2 renderXY = id.xy;
    int2 simXY = int2(id.x * _simResX / renderResX, id.y * _simResY / renderResY);
    int simOffset = simXY.x * _simResY + simXY.y + _uOffset;
    float value = _horizVel[simOffset];
    float red = value < 0 ? - value : 0;
    float green = value >=0 ? value : 0;
    float blue = 0;
    if(abs(value) > 1.001) {
    //     red = 0;
    //     green = 0;
        // blue = 1;
    }
    if((int)id.x < renderResX && (int)id.y < renderResY) {
        _renderTexture[renderXY] = float4(red, green, blue, 1);
    }
}

[numthreads(8,8,1)]
void CheckDesign(uint3 id : SV_DispatchThreadID)
{
    /*
    renders discrepancies only

    inputs:
    - velocitySources
    - u
    - v
    - s
    - simResX
    - simResY
    - renderResX
    - renderResY

    outputs:
    - renderTexture
    */
    int2 renderXY = id.xy;
    if(renderXY.x < renderResX && renderXY.y < renderResY) {
        int2 simXY = int2(id.x * _simResX / renderResX, id.y * _simResY / renderResY);
        int simOffset = simXY.x * _simResY + simXY.y;
        float3 design = _velocitySources[simOffset];
        float4 renderValue = float4(0, 0, 0, 1);
        if(length(design - float3(1, 0, 0)) == 0) {
            if(_isFluid[simOffset] == 1) {
                renderValue.x = 1;
            }
            if(_vertVel[simOffset] != 1) {
                renderValue.x = 0;
                renderValue.y = 1;
            }
            if(_vertVel[U(simOffset)] != 1) {
                renderValue.x = 0.5;
                renderValue.y = 0.5;
            }
            if(_vertVel[U(simOffset)] != 1 && _vertVel[simOffset] != 1) {
                renderValue.x = 0.5;
                renderValue.y = 0.5;
                renderValue.z = 0.5;
            }
        } else if(length(design - float3(0, 0, 1)) == 0) {
            if(_isFluid[simOffset] == 1) {
                renderValue.x = 1;
            }
            if(_vertVel[simOffset] != -1 || _vertVel[U(simOffset)] != -1) {
                renderValue.z = 1;
            }
        }

        _renderTexture[renderXY] = renderValue;
    }
}
